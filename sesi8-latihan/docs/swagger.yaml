basePath: /
definitions:
  models.Person:
    properties:
      address:
        type: string
      name:
        description: gorm.Model
        type: string
    type: object
  views.CreatePeopleSwagger:
    properties:
      error: {}
      message:
        example: GET_SUCCESS
        type: string
      payload:
        $ref: '#/definitions/models.Person'
      status:
        example: 200
        type: integer
    type: object
  views.DeletePeopleSwagger:
    properties:
      error: {}
      message:
        example: GET_SUCCESS
        type: string
      payload: {}
      status:
        example: 200
        type: integer
    type: object
  views.GetAllPeopleSwagger:
    properties:
      error: {}
      message:
        example: GET_SUCCESS
        type: string
      payload:
        items:
          $ref: '#/definitions/models.Person'
        type: array
      status:
        example: 200
        type: integer
    type: object
  views.UpdatePeopleSwagger:
    properties:
      error: {}
      message:
        example: GET_SUCCESS
        type: string
      payload:
        $ref: '#/definitions/models.Person'
      status:
        example: 200
        type: integer
    type: object
host: localhost:4000
info:
  contact:
    email: reyhan@gmail.com
    name: Reyhan
  description: Sample API Spec for Orders
  termsOfService: http://swagger.io/terms/
  title: Orders API
  version: v1.0
paths:
  /people:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.DeletePeopleSwagger'
      summary: Delete people
      tags:
      - person
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.GetAllPeopleSwagger'
      summary: Get all people
      tags:
      - person
    post:
      consumes:
      - application/json
      parameters:
      - description: Create people
        in: body
        name: people
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.CreatePeopleSwagger'
      summary: Create people
      tags:
      - person
    put:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.UpdatePeopleSwagger'
      summary: Update people
      tags:
      - person
swagger: "2.0"
